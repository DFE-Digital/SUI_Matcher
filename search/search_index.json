{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The NHS Number Matcher Pilot is a tool that allows for person records to be matched against NHS numbers held on the NHS SPINE, via the PDS FHIR API.</p> <p>Check out the architecture section for further information.</p> <p>Note</p> <p>This project is under active development.</p>"},{"location":"#goals","title":"Goals","text":"<p>The key goals of this project are:</p> <ul> <li>Improve matching processes for NHS numbers</li> <li>Evaluate how good the match rate is</li> <li>Understand any IG challenges</li> </ul>"},{"location":"adrs/","title":"Architecture Decision Records","text":"<p>ADR documentation will be hosted in our github repo.</p> ID Date Decision Status 001 2024-01-31 Initial Tech Choices Accepted 002 2025-04-16 Distribution Strategy for .NET CLI Client Tools Accepted"},{"location":"architecture/","title":"Architecture","text":"<ul> <li>Architecture</li> <li>Constraints and Principals</li> <li>High Level Logical Architecture</li> <li>Systems Architecture<ul> <li>Physical View</li> <li>Definitions</li> <li>Step by Step Flow Happy Path</li> <li>Sequence Diagram</li> </ul> </li> <li>Application Architecture<ul> <li>Container diagram</li> <li>Services</li> <li>matching</li> <li>auth</li> <li>external</li> <li>Search Criteria</li> <li>Search Rules</li> <li>Strategy 1 (Default and stable)</li> <li>Strategy 2</li> <li>Strategy 3</li> </ul> </li> <li>Data Overview</li> <li>Non Functional Requirements</li> <li>Non Functional Priorities</li> </ul> <p>These are the architecture documents.</p>"},{"location":"architecture/#constraints-and-principals","title":"Constraints and Principals","text":"<p>This project is aimed at providing a solution for Local Authorities that require more accurate matching capabilities.</p> <p>It requires a use-case to be agreed with NHS England to allow the use of the PDS FHIR API. This will require a number of governance steps to be followed, such as the DTAC.</p> <p>The PDS FHIR API has a limitation of 5 transactions per second for requests, and the \"fallback\" logic used in the pilot means each match to a person may use greater than 1 request. This means the PDS FHIR API is expected to initially be the biggest bottleneck for performance.</p> <p>For principles, please refer to the DfE Technical Guidance and Secure by Design Principles.</p>"},{"location":"architecture/#high-level-logical-architecture","title":"High Level Logical Architecture","text":"<pre><code>C4Container\n    title High Level Components - NHS SUI\n    Container_Boundary(c1, \"Local Authority\") {\n        System(laclient, \"Local Authority Client\")\n        System(sui_matching_service, \"Sui Matching Service\")\n        ContainerDb(db, \"File Storage\", \"Liquid Logic Output\")\n    }\n    Container_Boundary(c2, \"NHS Services\") {\n        System(nhs_fhir_api, \"NHS PDS FHIR API\")\n        System(nhs_auth_api, \"NHS PDS Auth API\")\n    }\n\n    Rel(laclient, db, \"Gets File\")\n    Rel(laclient, sui_matching_service, \"HTTPS\")\n    Rel(sui_matching_service, nhs_fhir_api, \"HTTPS\")\n    Rel(sui_matching_service, nhs_auth_api, \"HTTPS\")\n</code></pre>"},{"location":"architecture/#systems-architecture","title":"Systems Architecture","text":""},{"location":"architecture/#physical-view","title":"Physical View","text":""},{"location":"architecture/#definitions","title":"Definitions","text":"<p>Liquid Logic Server (Local Authority owned and run): Case management system used for recording referrals. Contains records with demographic information about referrals.</p> <p>File Storage (Local Authority owned and run): Server that will contain the file with the source information.</p> <p>Client Tool (New Component): A tool that takes the input file from the file storage and loops through the rows of data making a request to the SUI matching service. It outputs a results of the matching process and extra information about it.</p> <p>SUI Resource Group (New Component): Represents the application that will be deployed in a Local Authority.</p>"},{"location":"architecture/#step-by-step-flow-happy-path","title":"Step by Step Flow Happy Path","text":"<ol> <li>A nightly batch job runs that outputs a CSV file to an accessible location.</li> <li>The client tool periodically checks for a new file.</li> <li>When a new file is present it consumes it and starts to process the data.</li> <li>The client loops through the records in the file and extracts the information needed to be able to make an API call    against the SUI Matching Service via a private endpoint.</li> <li>The SUI Matching Service ingress controller (reverse proxy) accepts the request and forwards it onto the service.</li> <li>The SUI Service validates the data.</li> <li>With valid data it then checks authentication is in place to make a request to the NHS.</li> <li>With valid data and a valid authentication token it then makes one or more calls to the NHS PDS FHIR API to retrieve    a NHS number. This call is made over the internet.</li> <li>The returned results are examined and then returned to the client.</li> <li>The client outputs the data to a results CSV file (NHS numbers alongside the data) and a metadata CSV file that     gives further information on the process and input data.</li> </ol>"},{"location":"architecture/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    box Client Tooling\n        participant client as Client Tool\n    end\n    box SUI Service\n        participant suimatch as SUI Matching Service\n        participant suiexternal as SUI External Service\n        participant suiauth as SUI Auth Service\n    end\n    box NHS Services\n        participant nhsauth as NHS AUTH API\n        participant nhssearch as NHS FHIR API\n    end\n\n    client -&gt;&gt;+ suimatch: Sends record to be validated and matched\n    loop Validate Data\n        suimatch -&gt;&gt; suimatch: Validate the data sent\n        alt Invalid Data\n            suimatch --&gt;&gt; client: Data invalid end process\n        else Valid Data\n            suimatch -&gt;&gt;+ suiexternal: Sends query so a request can be made\n        end\n    end\n    suiexternal -&gt;&gt;+ suiauth: Checks authentication status\n    alt Token Does Not Exist\n        suiauth -&gt;&gt; nhsauth: Get new token\n        nhsauth --&gt;&gt; suiauth: Return new token\n    else Token Exists\n        suiauth --&gt;&gt; suiexternal: Token available to return\n    end\n    suiexternal -&gt;&gt; nhssearch: Makes request to NHS service\n    nhssearch --&gt;&gt; suiexternal: Returns data\n    suiexternal --&gt;&gt;- suimatch: Passes response to be formatted\n    suimatch --&gt;&gt;- client: Returns data to client to be output\n\n</code></pre>"},{"location":"architecture/#application-architecture","title":"Application Architecture","text":""},{"location":"architecture/#container-diagram","title":"Container diagram","text":"<pre><code>C4Container\n    title Container diagram for SUI Matcher\n    System(laclient, \"Local Authority Client\", \"The client to connect to the service\")\n\n    Container_Boundary(c1, \"Sui Matching Service\") {\n        Container(reverse_proxy, \"Gateway\", \"C#, .NET 8, YARP\", \"The reverse proxy/API gateway of the SUI matcher.\")\n        Container(matching_api, \"Matching APIs\", \"C#, .NET 8, MassTransit\", \"The barista service.\")\n        Container(auth_api, \"Auth APIs\", \"C#, .NET 8, MassTransit\", \"The authentication service.\")\n        Container(external_api, \"External Services\", \"C#, .NET 8, Marten\", \"Makes the outbound connections for other services\")\n\n        Boundary(b1, \"Docker containers\", \"boundary\") {\n            ContainerDb(cache, \"Storage\", \"Redis\", \"Stores bearer tokens for auth\")\n            Container(keyvault, \"KeyVault\", \"Azure Key Vault\", \"Storage of secret values\")\n        }\n    }\n    Container_Boundary(c2, \"NHS PDS FHIR API\") {\n        System(pds, \"PDS FHIR API\", \"The PDS service\")\n    }\n\n    Rel(laclient, reverse_proxy, \"Uses\", \"HTTPS\")\n    UpdateRelStyle(laclient, reverse_proxy, $offsetY=\"-20\")\n    Rel(reverse_proxy, matching_api, \"Proxies\", \"HTTP\")\n    Rel(auth_api, cache, \"Adds/checks Tokens\", \"HTTP\")\n    Rel(auth_api, keyvault, \"Gets Secrets\", \"HTTP\")\n    Rel(auth_api, pds, \"Authenticates\", \"HTTPS\")\n    UpdateRelStyle(auth_api, cache, $offsetX=\"30\")\n    Rel(external_api, cache, \"Gets Token\", \"HTTP\")\n    Rel(external_api, keyvault, \"Gets Secrets\", \"HTTP\")\n    Rel(external_api, pds, \"Retrieves NHS Number\", \"HTTPS\")\n    UpdateRelStyle(external_api, keyvault, $offsetX=\"40\", $offsetY=\"40\")\n    Rel(external_api, auth_api, \"Calls\", \"HTTP\")\n    Rel(matching_api, external_api, \"Calls\", \"HTTP\")\n\n</code></pre>"},{"location":"architecture/#services","title":"Services","text":""},{"location":"architecture/#matching","title":"matching","text":"<p>The matching service provides the ingress into the application. It also serves as the logic controller for the application. It accepts the following parameters:</p> <ul> <li>given name (required)</li> <li>family name (required)</li> <li>date of birth - which can be a range (required)</li> <li>gender</li> <li>postcode</li> <li>email address</li> <li>phone number</li> </ul> <p>Adapted from the schema specified here NHS PDS FHIR Schema.</p> <p>It validates these parameters meet the schema and then handles the logic for making external calls to the NHS in order to find a matching NHS number.</p> <p>Response 200:</p> <pre><code>{ \n    \"result\": {\n        \"matchStatus\": \"match\",\n        \"nhsNumber\": \"1234567890\",\n        \"processStage\": \"3\",\n        \"score\": \"0.96\"\n    },\n    \"dataQuality\": {\n        \"given\": \"valid\",\n        \"family\": \"valid\",\n        \"birthdate\": \"valid\",\n        \"addressPostalCode\": \"valid\",\n        \"phone\": \"invalid\",\n        \"email\": \"invalid\",\n        \"gender\": \"notProvided\"\n    }\n}\n</code></pre> <p>Result</p> Name Type Desc Values matchStatus string Match Result match, noMatch, potentialMatch, manyMatch nhsNumber string nhsNumnber 10 digit string, empty string ProcessStage int stage of the process it exited at 0, 1, 2, 3 score number Score of the search 0.0 to 1.0 <p>Match Status</p> Name Desc match One match has been returned noMatch No match has been returned potentialMatch There is a potential match. One match with score above 0.85 and below 0.95 manyMatch System returns mulitple matches <p>Data quality</p> Return Type Desc Valid string Data provided is valid Invalid string Data provided is invalid notProvided string No data was provided"},{"location":"architecture/#auth","title":"auth","text":"<p>Handles the secret key material in order to get the bearer token. It will use azure Key Vault to get the material needed to retrieve the bearer token. It will then store the bearer token in Redis to be accessed by the external service.</p>"},{"location":"architecture/#external","title":"external","text":"<p>Makes the external calls to the NHS PDS endpoints. Will get secrets from Key vault and bearer token from Redis.</p>"},{"location":"architecture/#search-criteria","title":"Search Criteria","text":"<p>Below there is reference to scoring. This scoring is the confidence score that is returned by the NHS when we perform a search. More information can be found about that in the scoring section here: PDS FHIR Search</p> <pre><code>---\ntitle: Matching conditions flow\n---\nstateDiagram-v2\n    clean: Canonicalise/clean data\n    apply_match_conditions: Apply Match Conditions\n    if_single_match: Single Match found\n    if_no_match_state: No Match found\n    confirmed_match: Confirmed Match\n    candidate_match: Candidate Match\n    manual_process: Manual Process\n    multiple_match: Multiple Matches\n    [*] --&gt; clean\n    clean --&gt; apply_match_conditions\n    apply_match_conditions --&gt; if_single_match\n    apply_match_conditions --&gt; multiple_match\n    multiple_match --&gt; manual_process\n    if_single_match --&gt; confirmed_match: if &gt;= 95% confident\n    if_single_match --&gt; candidate_match: if &lt; 95% confident\n    confirmed_match --&gt; [*]\n    candidate_match --&gt; manual_process\n    apply_match_conditions --&gt; if_no_match_state\n    if_no_match_state --&gt; apply_match_conditions: if more match conditions\n    if_no_match_state --&gt; no_match: if no more match conditions\n    no_match --&gt; manual_process\n    manual_process --&gt; [*]\n\n</code></pre>"},{"location":"architecture/#search-rules","title":"Search Rules","text":"<p>We use multiple strategies, strategy 1 being the default and defined below. Other strategies may be used in the future for testing purposes.</p>"},{"location":"architecture/#strategy-1-default-and-stable","title":"Strategy 1 (Default and stable)","text":"<p>The search criteria being used for the pilot is as below, and is subject to change as real-world data and match rates are evaluated.</p> Rule Order Search Example Returns 1 Exact search with given name, family name and DOB. <code>_exact-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 2 Exact search with all provided values. <code>_exact-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code>, <code>gender</code>=<code>male</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 3 fuzzy search with given name, family name and DOB. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 4 fuzzy search with all provided values. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code> <code>gender</code>=<code>male</code> <code>address-postalcode</code>=<code>WN4 9BP</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 5 fuzzy search with given name, family name and DOB range 6 months either side of given date. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1961-09-06</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES 6 guzzy search with given name, family name and DOB. Day swapped with month if day equal to or less than 12. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-09-06</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES"},{"location":"architecture/#strategy-2","title":"Strategy 2","text":"<p>An alternative strategy is currently under testing is defined below. This uses Non-fuzzy and fuzzy searches, including wild card searches on postcode. Order of queries is not opimized, instead uses a larger variation of queries.</p> Rule Order Search Example Returns 1 non-fuzzy search with given name, family name and DOB. <code>_exact-match</code>=<code>false</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code>, <code>history=true</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 2 non-fuzzy search with given name, family name and DOB range. <code>_exact-match</code>=<code>false</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1960-07-09</code>, <code>history=true</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 3 non-fuzzy search with all provided values, postcode as wildcard. <code>_exact-match</code>=<code>false</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code>, <code>address-postalcode</code>=<code>WN*</code>, <code>history=true</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 4 non-fuzzy search with all provided values. <code>_exact-match</code>=<code>false</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code>, <code>gender</code>=<code>male</code>, <code>address-postalcode</code>=<code>WN4 9BP</code>, <code>history=true</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 5 fuzzy search with given name, family name and DOB. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 6 fuzzy search with given name, family name, DOB range, postcode as wildcard. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1960-07-09</code>, <code>address-postalcode</code>=<code>WN*</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 7 fuzzy search with given name, family name, DOB range, postcode. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1960-07-09</code>, <code>address-postalcode</code>=<code>WN4 9BP</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 8 fuzzy search with all provided values. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code>, <code>gender</code>=<code>male</code>, <code>address-postalcode</code>=<code>WN4 9BP</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 9 fuzzy search with given name, family name and DOB. Day swapped with month if day equal to or less than 12. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-09-06</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES]"},{"location":"architecture/#strategy-3","title":"Strategy 3","text":"<p>This is a multi versioned strategy that has been developed through iterative testing on real world data. The below is version 14 of it and is currently the best performing and most optimised for PDS calling.</p> Rule Order Search Example Returns 1 non-fuzzy search with given name, family name and DOB. <code>_exact-match</code>=<code>false</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code>, <code>history=true</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 2 fuzzy search with given name, family name and DOB. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 3 fuzzy search with all provided values. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>eq1960-06-09</code>, <code>gender</code>=<code>male</code>, <code>address-postalcode</code>=<code>WN4 9BP</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 4 non-fuzzy search with given name, family name and DOB range. <code>_exact-match</code>=<code>false</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1960-07-09</code>, <code>history=true</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 5 non-fuzzy search with given name, family name, DOB range, postcode. <code>_exact-match</code>=<code>false</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1960-07-09</code>, <code>address-postalcode</code>=<code>WN4 9BP</code>, <code>history=true</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 6 fuzzy search with given name, family name and DOB range. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1960-07-09</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] 7 fuzzy search with given name, family name, DOB range, postcode. <code>_fuzzy-match</code>=<code>true</code>, <code>family</code>=<code>harley</code>, <code>given</code>=<code>topper</code>, <code>birthdate</code>=<code>ge1960-01-09</code>&amp;<code>birthdate</code>=<code>le1960-07-09</code>, <code>address-postalcode</code>=<code>WN4 9BP</code> One of:  [NHS_NUM, NO_MATCH, POTENTIAL_MATCH, MANY_MATCHES] <p>Definition of fuzzy search is defined here: NHS FHIR API Search.</p>"},{"location":"architecture/#data-overview","title":"Data Overview","text":"<p>This section is a work in progress...</p> <p>This project will collect anonymous data about the process. For each record that is sent to the service we will record information on the following:</p> <ul> <li>Data Quality</li> <li>Match Result</li> <li>Match Result Process Info</li> <li>Age Range</li> </ul> <p>This will allow for aggregate information to be collated and an evaluation on the process overall to be viewed.</p> <p>This information will be collated via log messages.</p> <p>No PII will be recorded.</p>"},{"location":"architecture/#non-functional-requirements","title":"Non Functional Requirements","text":"<p>Placeholder</p>"},{"location":"architecture/#non-functional-priorities","title":"Non Functional Priorities","text":"<p>The Non-Functional Priorities for the pilot are listed below.</p> <ol> <li>Security - Very sensitive data must be protected.</li> <li>Usability - Easy for both internal teams and external partners (e.g., Local Authorities) to use and adopt.</li> <li>Compatibility - Integration with existing systems like the NHS and Local Authority ecosystems.</li> <li>Maintainability - Highly iterative development process anticipated.</li> <li>Reliability - Not initially business-critical. Reliable enough for the pilot phase.</li> <li>Performance - Handling relatively small workloads during the pilot phase.</li> <li>Availability - Emphasis on maintenance and ensuring sufficient uptime.</li> <li>Portability - Targeted at limited settings for the pilot.</li> <li>Scalability - May scale from 1 to 4 Local Authorities (LAs) quickly, this would require these priorities to    change. Future hosting patterns to be reviewed.</li> </ol>"},{"location":"cicd/","title":"CI/CD","text":""},{"location":"cicd/#environments","title":"Environments","text":"<ul> <li>Local</li> <li>Dev (pipeline)</li> <li>Integration</li> <li>Staging (local authority)</li> <li>Production (local authority)</li> </ul> <p>Local: Ability to spin up the environment and connect to the NHS integration environment in order to run integration tests or test the API for example returns.</p> <p>Dev: This referes to the environment that exists in our CI pipelines. All external dependencies should be stubbed out and no secret material needed.</p> <p>Integration: Static integration environment updated at every morning. Connects out to the NHS integration environment.</p> <p>Staging: Located within a local authority and allows for testing deployments before running in prod.</p> <p>Production: Live environment in prod running against real data.</p>"},{"location":"cicd/#environment-progression","title":"Environment Progression","text":"<p>There may be differences in how deployment is done in the different local authorities.</p> <p>The below diagram looks at how environments are structured up until staging and production.</p> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': true, 'showCommitLabel':true,'mainBranchName': 'Local'}} }%%\n      gitGraph\n        commit id:\"Push to Github\"\n        branch Dev\n        commit id:\"Successful Build\"\n        commit id:\"Version Tagged\"\n        commit id:\"Bicep Files Created\"\n        branch Integration\n        commit id:\"Integration Rebuilt\"\n        commit type: HIGHLIGHT id:\"Environment Up\"\n        commit id:\"Integration Testing and Assurance\"\n        commit type:REVERSE id:\"Release Artifact Tagged\"\n</code></pre>"},{"location":"cicd/#deployment","title":"Deployment","text":"<p>To be tested... Looking at using bicep files output from the aspire framework and built using github actions. This will be the case for development. For staging and production we will potentially need a different way.</p> <p>Currently, the deployment uses the saved bicep files to run the deployment. The bicep files are out of sync with what the aspire generator produces so currently if you need to add anything to the deployment it will have to be done manually.</p>"},{"location":"clientarchitecture/","title":"Client Architecture","text":""},{"location":"clientarchitecture/#high-level-view","title":"High Level View","text":"<p>The client is a file processing application which watches for files in a directory, processes it and makes requests to the SUI application based on the records.</p>"},{"location":"clientarchitecture/#assumptions","title":"Assumptions","text":"<ul> <li>Input file format will be a CSV.</li> <li>Files will be located in a directory on a server.</li> <li>Client will have direct network access to the server.</li> <li>All communication will be internal to Azure.</li> </ul>"},{"location":"clientarchitecture/#features","title":"Features","text":""},{"location":"clientarchitecture/#file-watcher","title":"File Watcher","text":"<p>Watches a directory for a file. When file appears that matches the criteria it moves to load it.</p> <p>Configuration Options:</p> <ul> <li>File prefix</li> <li>File suffix</li> <li>Excluded files</li> <li>Modification time</li> </ul>"},{"location":"clientarchitecture/#cli-tool","title":"CLI Tool","text":"<p>Ability to run the tool via cmdline.</p>"},{"location":"clientarchitecture/#file-loader","title":"File Loader","text":"<p>Loads the file and checks initial configurations. Should assert that:</p> <ul> <li>File in format expected</li> <li>Expected field headings exist</li> </ul>"},{"location":"clientarchitecture/#record-handler","title":"Record Handler","text":"<p>Loops through each record to make a request to the SUI server.</p> <ul> <li>If required data fields not there it shouldn't make a request<ul> <li>Given</li> <li>Family</li> <li>DOB</li> </ul> </li> <li>Makes request to SUI server and waits for response.</li> </ul>"},{"location":"clientarchitecture/#response-handler","title":"Response Handler","text":"<p>Handles the response coming back from the server. Will need to handle the structure sent back from the server and format it. </p>"},{"location":"clientarchitecture/#outputs","title":"Outputs","text":"<p>Appends to the loaded CSV file with the NHS number if it existed.</p> <p>Writes a metadata file corresponding to the original file with additional information about the process:</p> <ul> <li>Data quality</li> <li>Validation issues</li> <li>Process stage it completed at</li> <li>Match status</li> <li>Match score</li> <li>Row number</li> </ul> <p>The metadata output file should be named the same as the data output file but with a metadata suffix.</p>"},{"location":"gettingstarted/","title":"Getting started","text":""},{"location":"gettingstarted/#setting-up-an-api-credential","title":"Setting up an API credential","text":"<ol> <li>On the NHS Developer site, create a new developer account, if you do not yet have one.</li> <li>Add a new application by going to environment access. Use the 'Integration test' and set yourself as the owner.</li> <li>Create a new API, linked to <code>Personal Demographics Service - Application-Restricted (Integration Testing)</code>. You will need to give this a globally unique name.</li> <li>Generate a keypair, by running these commands (from the NHS documentation)<ol> <li><code>KID=test-1</code></li> <li><code>openssl genrsa -out $KID.pem 4096</code></li> <li><code>openssl rsa -in $KID.pem -pubout -outform PEM -out $KID.pem.pub</code></li> <li><pre><code>MODULUS=$(\n   openssl rsa -pubin -in $KID.pem.pub -noout -modulus `# Print modulus of public key` \\\n   | cut -d '=' -f2                                    `# Extract modulus value from output` \\\n   | xxd -r -p                                         `# Convert from string to bytes` \\\n   | openssl base64 -A                                 `# Base64 encode without wrapping lines` \\\n   | sed 's|+|-|g; s|/|_|g; s|=||g'                    `# URL encode as JWK standard requires`\n   )</code></pre></li> <li><pre><code>echo '{\n     \"keys\": [\n       {\n         \"kty\": \"RSA\",\n         \"n\": \"'\"$MODULUS\"'\",\n         \"e\": \"AQAB\",\n         \"alg\": \"RS512\",\n         \"kid\": \"'\"$KID\"'\",\n         \"use\": \"sig\"\n       }\n     ]\n   }' &gt; $KID.json</code></pre></li> </ol> </li> <li>Upload the <code>test-1.json</code> file to your application's registration, on the 'Manage public key' page</li> <li>On the API portal, create a new API key, and copy the Key value. You do not need the secret. Then run the following command, using your Key value between the quotation marks.<ol> <li><code>API_KEY=\"IlmDF45AbP8Ao11pRtkK7tCoApApdABC\"</code></li> </ol> </li> <li>Create the <code>.env</code> file to provide these secrets to the mocked Azure Secret Manager, by running the following commands:<ol> <li><code>echo \"export NhsAuthConfig__NHS_DIGITAL_PRIVATE_KEY=\\\"$(openssl rsa -in $KID.pem -traditional -out -)\\\"\" &gt; .env</code></li> <li><code>echo \"export NhsAuthConfig__NHS_DIGITAL_KID=\\\"$KID\\\"\" &gt;&gt; .env</code></li> <li><code>echo \"export NhsAuthConfig__NHS_DIGITAL_CLIENT_ID=\\\"$API_KEY\\\"\" &gt;&gt; .env</code></li> </ol> </li> </ol> <p>If you're using an IDE (such as Jetbrains Rider), you can add these environment variables to the AppHost run configuration, as follows: </p>"},{"location":"gettingstarted/#pre-requisites","title":"Pre-requisites","text":"<p>You must install the .net CLI and v9 SDK. For macOS, run:</p> <pre><code>curl -sSL https://dot.net/v1/dotnet-install.sh | bash -s -- --version 9.0.102 --install-dir \"$HOME/.dotnet\"\necho 'export PATH=\"$HOME/.dotnet:$PATH\"' &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc &amp;&amp; echo $PATH\n</code></pre> <p>You should then be able to build the solution, using <pre><code>dotnet build sui-matching.sln\n</code></pre></p>"},{"location":"gettingstarted/#unit-and-integration-testing","title":"Unit and integration testing","text":"<ul> <li>To run the whole test suite via the terminal:</li> </ul> <pre><code>source .env\ndotnet test --settings tests.runsettings\n</code></pre> <p>or individually:</p> <pre><code>source .env\ncd sui-tests\ndotnet test &lt;path&gt;/&lt;to&gt;/&lt;test-class&gt;\n</code></pre>"},{"location":"gettingstarted/#running-locally","title":"Running locally","text":"<p>To build and run the project: <pre><code>dotnet build sui-matching.sln\ndotnet run --project src/app-host/AppHost.csproj\n</code></pre> Run simple test: <pre><code>curl -H 'Content-Type: application/json' \\\n      -d '{ \"given\":\"octavia\",\"family\":\"chislett\", \"birthdate\": \"2008-09-20\"}' \\\n      -X POST \\\n      http://localhost:5000/matching/api/v1/matchperson\n</code></pre> You should see a <code>matchStatus</code> of 0 if this has been successful. A <code>matchStatus</code> of 4 indicates that there has been an error connecting to the PDS API.</p> <p>If you have errors connecting to the aspire host page you may need to run the below commands: <pre><code>dotnet dev-certs https --clean\ndotnet dev-certs https --trust\n</code></pre></p>"},{"location":"waysof/","title":"Ways of Working","text":"<p>Quick intro into ways of working.</p>"},{"location":"waysof/#branching","title":"Branching","text":"<p>We follow basic branching practices. It follows the standard of prefix/ticket-number/headline-description.</p> <p>Prefix types can be:</p> <ul> <li>feature/: For developing new features.</li> <li>bugfix/: To fix bugs in the code.</li> <li>docs/: Used to write, modify or correct documentation.</li> </ul>"},{"location":"waysof/#pull-requests","title":"Pull Requests","text":"<p>Pull requests to be approved by one other member of the team. All tests should pass before merging. Merging to be done by the person who raises the pull request so that their name appears on the merge commit.</p>"},{"location":"waysof/#commit-messages","title":"Commit Messages","text":"<p>Commit messages should follow on from the branching standards.</p> <pre><code>&lt;type&gt;([ticket number]): &lt;description&gt;\n[body]\n</code></pre>"},{"location":"waysof/#cicd-aspirations","title":"CI/CD (Aspirations)","text":"<p>When infra up and running we can work out how to continually deploy to the integration environment within the DfE. </p>"},{"location":"waysof/#testing-aspirations","title":"Testing (Aspirations)","text":"<ul> <li>unit testing of features with no external dependencies.</li> <li>integration/e2e test to be performed on pull request. Data set to be developed to test the likely scenarios.</li> </ul>"},{"location":"waysof/#documentation","title":"Documentation","text":"<p>Documentation to be maintained in this repo and published to GitHub.</p>"}]}