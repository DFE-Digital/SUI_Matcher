name: Build and Upload DBS Client Watcher

on:
    workflow_dispatch:
        inputs:
            version:
                description: 'Version number'
                required: true
                default: 'v0.0.45'
            blob_storage_location:
                description: 'Blob storage location'
                required: true
                default: 's215d01-integration-container-01'
            storage_account:
                description: 'Storage account'
                required: true
                default: 's215d01integrationsa01'
            virtual_machine_name:
                description: 'Virtual Machine Name'
                required: true
                default: 's215d01-integration-vm-01'
            environment:
                description: 'Environment'
                required: true
                default: 'Integration'

permissions:
  id-token: write
  contents: read

jobs:
    build:
        runs-on: ubuntu-latest
        env: 
            AZURE_ENV_NAME: ${{ inputs.environment }}
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            AZURE_LOCATION: "westeurope"
            AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
            CLIENT_VERSION: ${{ inputs.version }}
            BLOB_STORAGE_LOCATION: ${{ inputs.blob_storage_location }}
            STORAGE_ACCOUNT: ${{ inputs.storage_account }}
            VN_NAME: ${{ inputs.virtual_machine_name }}

        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Setup .NET
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: '9.0.x'

        - name: Publish DBS Client Watcher
          run: dotnet publish SUI.DBS.Client.Watcher -r win-x64 --self-contained /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true --configuration Release --output ./output --version-suffix ${{ env.CLIENT_VERSION }}

        - name: Publish DBS Client Console
          run: dotnet publish SUI.DBS.Client.Console -r win-x64 --self-contained /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true --configuration Release --output ./output --version-suffix ${{ env.CLIENT_VERSION }}

        - name: Login to Azure
          uses: azure/login@v2
          with:
            client-id: ${{ env.AZURE_CLIENT_ID }}
            tenant-id: ${{ env.AZURE_TENANT_ID }}
            subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

        - name: Upload to Blob Storage
          run:
            az storage blob upload-batch --destination ${{ env.BLOB_STORAGE_LOCATION }} --account-name ${{ env.STORAGE_ACCOUNT }} --source ./output --pattern "*.exe" --overwrite
          
        - name: Use Serial Console to Download EXE from Blob Storage
          run: |
            az vm run-command invoke \
              --command-id RunPowerShellScript \
              --name ${{ env.VN_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --script '
            
              $connectionString = "DefaultEndpointsProtocol=https;AccountName=${{ env.STORAGE_ACCOUNT }};AccountKey=${{ secrets.STORAGE_ACCOUNT_KEY }};EndpointSuffix=core.windows.net"
              $blobContainerName = "${{ env.BLOB_STORAGE_LOCATION }}"
              $destinationDir = "C:\Users\AzCopy\${{ env.BLOB_STORAGE_LOCATION }}"
            
              # Create Directory if does not exist
              New-Item -ItemType Directory -Path "$destinationDir"

              # Install Azure CLI if not installed
              Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile "AzureCLI.msi"
              Start-Process -FilePath "AzureCLI.msi" -ArgumentList "/quiet" -Wait
            
              # Download DBS EXE files from Blob Storage
              az storage blob download-batch --connection-string $connectionString --destination $destinationDir --source $blobContainerName --pattern "dbs*.exe" --overwrite true

              Write-Host "DBS client EXE files downloaded"
            '