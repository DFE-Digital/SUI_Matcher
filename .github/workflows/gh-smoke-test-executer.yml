name: Smoke Test Executer

on:
  workflow_call:
    inputs:
      smoke_test_type:
        required: true
        type: string
        description: "Type of smoke test to run"
      use_small_dataset:
        required: false
        type: boolean
        default: false
        description: "Run smoke test with a smaller dataset"
      azure_location:
        required: true
        type: string
        description: "Azure location for the resources"
      version:
        required: true
        type: string
        description: "Version of the application to test"
      vm_name:
        required: true
        type: string
        description: "Name of the virtual machine"
    secrets:
      sui_server_url:
        required: true
        description: "url of the SUI server"
      azure_sub_id:
        required: true
        description: "Azure subscription ID"
      azure_client_id:
        required: true
        description: "Azure client ID"
      azure_tenant_id:
        required: true
        description: "Azure tenant ID"
      resource_group:
        required: true
        description: "Azure resource group"

permissions:
  id-token: write
  contents: read

jobs:
  smoke_test:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.azure_client_id }}
      AZURE_TENANT_ID: ${{ secrets.azure_tenant_id }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.azure_sub_id }}
      AZURE_LOCATION: ${{ inputs.azure_location }}
      AZURE_RESOURCE_GROUP: ${{ secrets.resource_group }}
      SMOKE_TEST_TYPE: ${{ inputs.smoke_test_type }}
      VERSION: ${{ inputs.version }}
      VM_NAME: ${{ inputs.vm_name }}
      SUI_SERVER_URL: ${{ secrets.sui_server_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ env.VERSION }}

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Set variables
        id: set_file_name
        run: |
          if [ "${{ env.SMOKE_TEST_TYPE }}" == "dbs_batch_search" ]; then
            file_name="./tests/E2E.Tests/Resources/Smoke/dbs_batch_search_responses.txt"
            log_success_message="The DBS results file has 7 records, batch search resulted"
            packagename="SUI.DBS.Response.Logger.Watcher"
            destinationpathfile="dbs_batch_search_responses.txt"
            logFilePrefix="dbs-response-logger-logs"
            executable="suidbsw.exe"
          else
            if [ "${{ inputs.use_small_dataset }}" = "true" ]; then
                file_name="./tests/E2E.Tests/Resources/Smoke/sui_batch_search_queries_small.csv"
            else
              file_name="./tests/E2E.Tests/Resources/Smoke/sui_batch_search_queries.csv"
            fi
            log_success_message="File moved to Processed directory"
            packagename="SUI.Client.Watcher"
            destinationpathfile="sui_batch_search_queries.csv"
            logFilePrefix="sui-client-logs"
            executable="suiw.exe"
          fi
          echo "file_name=${file_name}" >> $GITHUB_ENV
          echo "log_success_message=${log_success_message}" >> $GITHUB_ENV
          echo "log_error_message=Error processing file" >> $GITHUB_ENV
          echo "packagename=${packagename}" >> $GITHUB_ENV
          echo "destinationpathfile=${destinationpathfile}" >> $GITHUB_ENV
          echo "executable=${executable}" >> $GITHUB_ENV
          echo "logFilePrefix=${logFilePrefix}" >> $GITHUB_ENV

      - name: Read file contents
        id: read_file
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "data<<${EOF}" >> $GITHUB_OUTPUT
          base_64=`openssl base64 -in ${{ env.file_name }}` ; echo "${base_64}" >> $GITHUB_OUTPUT
          echo "${EOF}" >> $GITHUB_OUTPUT

      - name: Smoke Test Run (tool)
        id: return_data
        run: |
          return_data="$(az vm run-command invoke \
            --command-id RunPowerShellScript \
            --name ${{ env.VM_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --script '

          $basePath = "C:\Users\SmokeTests"
          $serverUrl = "${{ env.SUI_SERVER_URL }}"
          $installPath = "C:\Program Files\dotnet\tools"
          $basePathUnprocessed = "$basePath\unprocessed"
          $basePathProcessed = "$basePath\processed"
          $packageName="${{ env.packagename }}"
          $destinationPathFile="${{ env.destinationpathfile }}"
          $destinationPath = "$basePathUnprocessed\$destinationPathFile"
          $logFileName = "${{ env.logFilePrefix }}-$(Get-Date -Format 'yyyy-MM-dd').log"
          $logFilePath = Join-Path $basePath $logFileName
          # 30 minutes timeout for the tool to run should be enough for most smoke tests
          $toolTimeoutInSeconds = 1800

          function Cleanup-SmokeTestEnvironment {
            param([string]$PackageName, [string]$SmokeTestsPath)
            if (dotnet tool list --tool-path $installPath | Select-String -Pattern $PackageName) {
                Write-Output "Uninstalling existing $PackageName tool..."
                dotnet tool uninstall $PackageName --tool-path $installPath
            }
            if (Test-Path $SmokeTestsPath) { Remove-Item -Path $SmokeTestsPath -Recurse -Force }
          }

          Cleanup-SmokeTestEnvironment -PackageName $packageName -SmokeTestsPath $basePath

          dotnet tool install $packageName --tool-path $installPath

          if ($env:Path -notlike "*$installPath*") {
            $env:Path = "$installPath;$env:Path"
          }

          New-Item -ItemType Directory -Path $basePath -Force
          New-Item -ItemType Directory -Path $basePathUnprocessed -Force
          New-Item -ItemType Directory -Path $basePathProcessed -Force

          # Start tool as a process so it can be killed directly
          if ("${{ env.SMOKE_TEST_TYPE }}" -eq "client_batch_search") {
              $process = Start-Process -FilePath "${{ env.executable }}" `
                  -ArgumentList "$basePathUnprocessed", "$basePathProcessed", "$serverUrl" `
                  -WorkingDirectory $basePath `
                  -PassThru
          } else {
              $process = Start-Process -FilePath "${{ env.executable }}" `
                  -ArgumentList "$basePathUnprocessed", "$basePathProcessed" `
                  -WorkingDirectory $basePath `
                  -PassThru
          }

          # Give time for the job to start before writing the file
          Start-Sleep -Seconds 30

          $fileContent = "${{ steps.read_file.outputs.data }}"
          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("$fileContent")) | Out-File -FilePath $destinationPath -Encoding utf8

          $timeout = (Get-Date).AddSeconds($toolTimeoutInSeconds)
          $successFound = $false

          while ((Get-Date) -lt $timeout) {
            if (Test-Path $logFilePath) {
              $logContent = Get-Content -Path $logFilePath -Raw
              if ($logContent -match "${{ env.log_success_message }}") {
                Write-Output "Smoke Test Passed"
                $successFound = $true
                break
              }
              elseif($logContent -match "${{ env.log_error_message }}") {
                Write-Error "${{ env.log_error_message }}"
                break
              }
            }
            Start-Sleep -Seconds 2
          }
          
          # Give time for the app to finish processing anything else before stopping it
          Start-Sleep -Seconds 30

          if ($process -and !$process.HasExited) {
              Stop-Process -Id $process.Id -Force
          }

          if (-not $successFound) {
            Write-Error "Smoke Test Failed"
            exit 1
          }

          exit 0
          ')"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "return_data<<${EOF}" >> $GITHUB_OUTPUT
          echo "${return_data}" >> $GITHUB_OUTPUT
          echo "${EOF}" >> $GITHUB_OUTPUT

      - name: check contents of return data for exceptions and errors
        shell: python
        run: |
          import json
          import sys
          import os

          client_return_data = """${{ steps.return_data.outputs.return_data }}"""

          if "Exception" in client_return_data or "Error" in client_return_data or "Failed" in client_return_data:
            print("Smoke Test Failed")
            print(client_return_data)
            sys.exit(1)
          else:
            print("Smoke Test Passed")
