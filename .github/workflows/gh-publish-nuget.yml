name: Publish client NuGet packages
on:
  push:
    branches:
      - main
    paths:
      - 'src/tools/client/**'
      - 'src/tools/dbs-response-logger/**'
      - 'src/Shared/**'
  workflow_dispatch:
    inputs:
      publish-client:
        description: 'Publish the client watcher to NuGet (Uses github latest tag)'
        required: true
        default: false
        type: boolean
      version-client:
        description: 'Version of the client watcher to publish (if none select, auto increment patch version)'
        required: false
        type: string
      publish-response-logger:
        description: 'Publish the response logger to NuGet (Uses github latest tag)'
        required: true
        default: false
        type: boolean
      version-response-logger:
        description: 'Version of the response logger to publish (if none select, auto increment patch version)'
        required: false
        type: string
        
env:
  client_name: 'SUI.Client.Watcher'
  client_service_name: 'SUI.Client.Service.Watcher'
  response_logger_name: 'SUI.DBS.Response.Logger.Watcher'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 'Get Client Nuget version'
        id: current_nuget_client_version
        run: |
          if [[ -n "${{ github.event.inputs.version-client }}" ]]; then
           VERSION="${{ github.event.inputs.version-client }}"
          else
           LOWERCASE_NAME="${{ env.client_name }}"
           LOWERCASE_NAME=$(echo "$LOWERCASE_NAME" | tr '[:upper:]' '[:lower:]')
           API_URL="https://api.nuget.org/v3-flatcontainer/${LOWERCASE_NAME}/index.json"
           RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$API_URL")
           HTTP_STATUS=$(tail -n1 <<< "$RESPONSE")
          
           if [[ "$HTTP_STATUS" == "404" ]]; then
             VERSION="0.0.1"
           else
             LAST_VERSION=$(jq -r '.versions[-1]' response.json)
             IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
             PATCH=$((PATCH + 1))
             VERSION="$MAJOR.$MINOR.$PATCH"
           fi
          fi

          echo "CLIENT_VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: 'Get Dbs logger nuget version'
        id: current_nuget_dbs_version
        run: |
          if [[ -n "${{ github.event.inputs.version-response-logger }}" ]]; then
           VERSION="${{ github.event.inputs.version-response-logger }}"
          else
           LOWERCASE_NAME="${{ env.response_logger_name }}"
           LOWERCASE_NAME=$(echo "$LOWERCASE_NAME" | tr '[:upper:]' '[:lower:]')
           API_URL="https://api.nuget.org/v3-flatcontainer/${LOWERCASE_NAME}/index.json"
           RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$API_URL")
           HTTP_STATUS=$(tail -n1 <<< "$RESPONSE")
          
           if [[ "$HTTP_STATUS" == "404" ]]; then
             VERSION="0.0.1"
           else
             LAST_VERSION=$(jq -r '.versions[-1]' response.json)
             IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
             PATCH=$((PATCH + 1))
             VERSION="$MAJOR.$MINOR.$PATCH"
           fi
          fi

          echo "DBS_VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Print Package Version
        run: |
          echo "next client nuget version: ${{ env.CLIENT_VERSION }}"
          echo "next dbs nuget version: ${{ env.DBS_VERSION }}"
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Check changed files to set publish flags
        id: check-changed-files
        run: |
          client_files=$(git show --name-only HEAD | grep src/tools/client || true)
          if [[ -n $client_files ]]; then
            echo "auto_publish_client=true" >> $GITHUB_ENV
          else
            echo "auto_publish_client=false" >> $GITHUB_ENV
          fi

          dbs_files=$(git show --name-only HEAD | grep src/tools/dbs-response-logger || true)
          if [[ -n $dbs_files ]]; then
            echo "auto_publish_response_logger=true" >> $GITHUB_ENV
          else
            echo "auto_publish_response_logger=false" >> $GITHUB_ENV
          fi

      - name: Print auto publish flags
        run: |
          echo "Auto Publish Client Watcher: ${{ env.auto_publish_client }}"
          echo "Auto Publish Response Logger: ${{ env.auto_publish_response_logger }}"

      - name: Package Client Watcher
        if: ${{ github.event.inputs.publish-client == 'true' || env.auto_publish_client == 'true' }}
        run: |
          dotnet pack ./src/tools/client/SUI.Client.Watcher/SUI.Client.Watcher.csproj \
            --configuration Release \
            --output ./nukpg \
            /p:Version=${{ env.CLIENT_VERSION }} \
            /p:PackAsTool=true

      - name: Publish Client Watcher
        if: ${{ github.event.inputs.publish-client == 'true' || env.auto_publish_client == 'true' }}
        run: |
          dotnet nuget push ./nukpg/${{env.client_name}}.${{ env.CLIENT_VERSION }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
          
      - name: Package Client Watcher Service
        if: ${{ github.event.inputs.publish-client == 'true' || env.auto_publish_client == 'true' }}
        run: |
          dotnet pack ./src/tools/client/SUI.Client.Service.Watcher/SUI.Client.Service.Watcher.csproj \
            --configuration Release \
            --output ./nukpg \
            /p:Version=${{ env.CLIENT_VERSION }}

      - name: Publish Client Watcher Service
        if: ${{ github.event.inputs.publish-client == 'true' || env.auto_publish_client == 'true' }}
        run: |
          dotnet nuget push ./nukpg/${{env.client_service_name}}.${{ env.CLIENT_VERSION }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
          
      - name: Package Response Logger
        if: ${{ github.event.inputs.publish-response-logger == 'true' || env.auto_publish_response_logger == 'true' }}
        run: |
          dotnet pack ./src/tools/dbs-response-logger/SUI.DBS.Response.Logger.Watcher/SUI.DBS.Response.Logger.Watcher.csproj \
            --configuration Release \
            --output ./nukpg \
            /p:Version=${{ env.DBS_VERSION }} \
            /p:PackAsTool=true
          
      - name: Publish Response Logger
        if: ${{ github.event.inputs.publish-response-logger == 'true' || env.auto_publish_response_logger == 'true' }}
        run: |
          dotnet nuget push ./nukpg/${{env.response_logger_name}}.${{ env.DBS_VERSION }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
      
          
