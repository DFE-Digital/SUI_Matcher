name: Publish client NuGet packages
on:
  workflow_dispatch:
    inputs:
      publish-client:
        description: 'Publish the client watcher to NuGet (Uses github latest tag)'
        required: true
        default: false
        type: boolean
      publish-response-logger:
        description: 'Publish the response logger to NuGet (Uses github latest tag)'
        required: true
        default: false
        type: boolean
        
env: 
  client_name: 'SUI.Client.Watcher'
  response_logger_name: 'SUI.DBS.Response.Logger.Watcher'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: 'TEST - nuget version'
        id: test_version
        run: |
          TEST_PACKAGE_NAME="Newtonsoft.Json"
          API_URL="https://api.nuget.org/v3-flatcontainer/${TEST_PACKAGE_NAME,,}/index.json"
          RESPONSE=$(curl -s -w "%{http_code}" -o response_test.json "$API_URL")
          HTTP_STATUS=$(tail -n1 <<< "$RESPONSE")
          
          echo "URL=$API_URL"
          echo "HTTP_STATUS=$HTTP_STATUS"

          if [[ "$HTTP_STATUS" == "404" ]]; then
            echo "Version not found, setting to 0.0.1"
            VERSION="0.0.1"
          else
            echo "Version found, incrementing patch version"
            LAST_VERSION=$(jq -r '.versions[-1]' response_test.json)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEWTON_VERSION=$VERSION" >> $GITHUB_ENV

      - name: 'Get Client Nuget version'
        id: current_nuget_client_version
        run: |
          LOWERCASE_NAME="${{ env.client_name }}"
          LOWERCASE_NAME=$(echo "$LOWERCASE_NAME" | tr '[:upper:]' '[:lower:]')
          API_URL="https://api.nuget.org/v3-flatcontainer/${LOWERCASE_NAME}/index.json"
          RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$API_URL")
          HTTP_STATUS=$(tail -n1 <<< "$RESPONSE")
          
          echo "URL=$API_URL"
          echo "HTTP_STATUS=$HTTP_STATUS"
          
          if [[ "$HTTP_STATUS" == "404" ]]; then
            VERSION="0.0.1"
          else
            LAST_VERSION=$(jq -r '.versions[-1]' response.json)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "CLIENT_VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: 'Get Dbs logger nuget version'
        id: current_nuget_dbs_version
        run: |
          LOWERCASE_NAME="${{ env.response_logger_name }}"
          LOWERCASE_NAME=$(echo "$LOWERCASE_NAME" | tr '[:upper:]' '[:lower:]')
          API_URL="https://api.nuget.org/v3-flatcontainer/${LOWERCASE_NAME}/index.json"
          RESPONSE=$(curl -s -w "%{http_code}" -o response.json "$API_URL")
          HTTP_STATUS=$(tail -n1 <<< "$RESPONSE")
          
          echo "URL=$API_URL"
          echo "HTTP_STATUS=$HTTP_STATUS"
          
          if [[ "$HTTP_STATUS" == "404" ]]; then
            VERSION="0.0.1"
          else
            LAST_VERSION=$(jq -r '.versions[-1]' response.json)
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
          fi

          echo "DBS_VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Print Package Version
        run: |
          echo "next client nuget version: ${{ env.CLIENT_VERSION }}"
          echo "next dbs nuget version: ${{ env.DBS_VERSION }}"
          echo "test nuget version: ${{ env.NEWTON_VERSION }}"
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Package Client Watcher
        if: ${{ github.event.inputs.publish-client == 'true' }}
        run: |
          dotnet pack ./src/tools/client/SUI.Client.Watcher/SUI.Client.Watcher.csproj \
            --configuration Release \
            --output ./nukpg \
            /p:Version=${{ env.PACKAGE_VERSION }}

      - name: Publish Client Watcher
        if: ${{ github.event.inputs.publish-client == 'true' }}
        run: |
          dotnet nuget push ./nukpg/${{env.client_name}}.${{ env.PACKAGE_VERSION }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
          
      - name: Package Response Logger
        if: ${{ github.event.inputs.publish-response-logger == 'true' }}
        run: |
          dotnet pack ./src/tools/DbsResponseLogger/SUI.DBS.Response.Logger.Watcher/SUI.DBS.Response.Logger.Watcher.csproj \
            --configuration Release \
            --output ./nukpg \
            /p:Version=${{ env.PACKAGE_VERSION }}
          
      - name: Publish Response Logger
        if: ${{ github.event.inputs.publish-response-logger == 'true' }}
        run: |
          dotnet nuget push ./nukpg/${{env.response_logger_name}}.${{ env.PACKAGE_VERSION }}.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }}
      
          
